generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Household {
  id           String          @id @default(uuid())
  name         String
  users        HouseholdUser[]
  items        Item[]
  listItems    ListItem[]
  invites      Invite[]
  meals        Meal[]
  plannedMeals PlannedMeal[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model User {
  id         String          @id @default(uuid())
  email      String          @unique
  firstName  String
  lastName   String
  households HouseholdUser[]
  invites    Invite[]
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

model HouseholdUser {
  id          String            @id @default(uuid())
  houshold    Household         @relation(fields: [householdId], references: [id])
  householdId String
  user        User              @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  role        HouseholdUserRole

  @@unique([householdId, userId])
}

model Item {
  id          String     @id @default(uuid())
  name        String
  household   Household  @relation(fields: [householdId], references: [id])
  householdId String
  listItems   ListItem[]
  meals       Meal[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model ListItem {
  id          String    @id @default(uuid())
  completedAt DateTime?
  details     String
  item        Item      @relation(fields: [itemId], references: [id])
  itemId      String
  household   Household @relation(fields: [householdId], references: [id])
  householdId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Invite {
  id          String    @id @default(uuid())
  household   Household @relation(fields: [householdId], references: [id])
  householdId String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([householdId, userId])
}

model Meal {
  id           String        @id @default(uuid())
  name         String
  description  String
  household    Household     @relation(fields: [householdId], references: [id])
  householdId  String
  items        Item[]
  plannedMeals PlannedMeal[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model PlannedMeal {
  id          String    @id @default(uuid())
  meal        Meal      @relation(fields: [mealId], references: [id])
  mealId      String
  household   Household @relation(fields: [householdId], references: [id])
  householdId String
  date        DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([mealId, householdId, date])
}

enum HouseholdUserRole {
  OWNER
  USER
}
