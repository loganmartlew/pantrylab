import { Injectable } from '@nestjs/common';
import { <%= nameUpperSingular %>Dto, <%= nameUpperSingular %>UpdateDto } from './dto';
import { DbService } from '@pantrylab/db';

@Injectable()
export class <%= nameUpperPlural %>Service {
  constructor(private db: DbService) {}

  async checkExists(id: string) {
    const <%= nameLowerSingular %> = await this.db.<%= nameLowerSingular %>.findUnique({
      where: { id },
    });
    return !!<%= nameLowerSingular %>;
  }

  async create(<%= nameLowerSingular %>Dto: <%= nameUpperSingular %>Dto) {
    const <%= nameLowerSingular %> = await this.db.<%= nameLowerSingular %>.create({
      data: <%= nameLowerSingular %>Dto,
    });
    return <%= nameLowerSingular %>;
  }

  async findAll() {
    const <%= nameLowerPlural %> = await this.db.<%= nameLowerSingular %>.findMany();
    return <%= nameLowerPlural %>;
  }

  async findOne(id: string) {
    const <%= nameLowerSingular %> = await this.db.<%= nameLowerSingular %>.findUnique({
      where: { id },
    });
    return <%= nameLowerSingular %>;
  }

  async update(id: string, update<%= nameUpperSingular %>Dto: <%= nameUpperSingular %>UpdateDto) {
    const <%= nameLowerSingular %> = await this.db.<%= nameLowerSingular %>.update({
      where: { id },
      data: update<%= nameUpperSingular %>Dto,
    });
    return <%= nameLowerSingular %>;
  }

  async remove(id: string) {
    const <%= nameLowerSingular %> = await this.db.<%= nameLowerSingular %>.delete({
      where: { id },
    });
    return <%= nameLowerSingular %>;
  }
}
